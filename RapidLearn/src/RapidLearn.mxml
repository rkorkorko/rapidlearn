<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="initApp()">
  <mx:Script>
    <![CDATA[
    	import model.TaggedExistingEvent;
    	import model.Problem;
    	import model.NewProblemEvent;
    	import model.Concept;
    import mx.states.SetStyle;
    import DrawingClasses.Designer;
    import mx.core.DragSource;
    import mx.managers.DragManager;
    import mx.managers.CursorManager;
    import mx.events.DragEvent;
    import com.adobe.viewsource.ViewSource;
    import ui.ProblemInputForm;
	import mx.managers.PopUpManager;
	import ui.TagExistingProbsForm;
	import mx.collections.ArrayCollection;
	import mx.controls.Alert;
	import mx.events.CloseEvent;
    
    [Bindable]
    [Embed(source="/assets/arrow_green.png")] 
    public var lineOnPicture:Class; 
    [Bindable]
    [Embed(source="/assets/add.png")] 
    public var boxPicture:Class; 
    
    private var xOff:Number;
    private var yOff:Number;	  
    private var designer:Designer = new Designer(RapidLearn(this));  
   
   	//cursor manager
    [Embed("/assets/grab.png")]
    private var customCursor:Class;
    private var cursorID:int;
    
    //pop-up manager for for add problem form. 
    var win: ProblemInputForm;
    //pop up manager for tagging existing problems
    private var win2:TagExistingProbsForm;
    
    //to enable listener for enter key
    private var enableEnterLstnr: Boolean = false;
    private var enableEnterLstnrTag:Boolean = false;
    
   //keyboard listener for enter key
    public function enterKeyListener(event: KeyboardEvent):void{
    	trace("enter in keyboard listner");
    	if (event.charCode==13){
    		if (enableEnterLstnr==true){
    		win.validateForm();
    		trace("fired keyboard listner");
    		enableEnterLstnr = false;
    		}
    		else if (enableEnterLstnrTag==true){
    			win2.submitExistingProblem();
    			enableEnterLstnrTag = false; 
    			trace("in rapid learn lstnr");
    		}
    	
    	}
    } 
   
    private function showAddProblemForm():void{
		win = PopUpManager.createPopUp(this,ProblemInputForm,true) as ProblemInputForm;
		win.addEventListener("newProblem",newProblemHandler);
		win.init();
		PopUpManager.centerPopUp(win);		
		enableEnterLstnr = true;	
	}
	
	
	private function showTagExistingProbsForm():void{
		win2=PopUpManager.createPopUp(this,TagExistingProbsForm,true) as TagExistingProbsForm;
		win2.setDesigner(this.designer);
		win2.addEventListener("taggedExistingProblem",taggedExistingProblemHandler);
		PopUpManager.centerPopUp(win2);
	}
	
	private function taggedExistingProblemHandler(event:TaggedExistingEvent):void {
		if(selectedConcept() != null) {
			var p:Problem = event.getProblem();
			p.addConcept(selectedConcept());
			this.statusNotification.text = "Tagged Existing Problem: "+p.getName()+" with Concept: "+selectedConcept().getName();
		}
	}
	
	private function newProblemHandler(event:NewProblemEvent):void {
		if(selectedConcept() != null) {
			//trace("Handler recieved new problem");
			//trace("with name "+event.getProblem().getName());
		
			// Tag the new problem with the selected concept and add
			// to list of problems
			var p:Problem = event.getProblem();
			p.addConcept(selectedConcept());
			this.designer.getCourseMap().addProblem(p);
			conceptSelectionChanged(new Event("selectionChanged"));
		}
		else {
			trace("Invalid problem submission when no concept selected!");
		}
	
	}
		
    
    public function initApp():void{
      designer.setDesignArea(designArea);
      designer.addEventListener("selectionChanged",conceptSelectionChanged);
       ViewSource.addMenuItem(this, "SourceViews/index.html");
       application.addEventListener(KeyboardEvent.KEY_UP,keyPressHandler);
		application.setFocus();
      this.addEventListener(KeyboardEvent.KEY_DOWN, enterKeyListener);
    }
    
    public function keyPressHandler(event:KeyboardEvent){
    	trace("fired");
    	trace(event.keyCode);
    	if(event.keyCode == 8 || event.keyCode == 46){
    		trace("going into delete");
    		designer.deleteSelectedLines();
    		designer.deleteSelectedBoxes();
    	}
    }
    

    
    // this methods sets x,y coordinate of new box
    public function pictureDragDrop(event:DragEvent):void{	    	
      var x:int = event.currentTarget.mouseX - xOff;
      var y:int = event.currentTarget.mouseY - yOff;
      CursorManager.removeAllCursors();      
      designer.addBox(x,y); 	  
    } 
    // this method gets x and y coordinate of template box image
    private function myoffset(img:Image):void {
      xOff = img.mouseX;
      yOff = img.mouseY;
    }

    // this method does acceptable draging box image
    public function pictureDragEnter(event:DragEvent):void{
      DragManager.acceptDragDrop(Canvas(event.target));
      
    } 
    
    // Returns the concept that is currently selected in the view,
    // or null if no concept is selected.
    public function selectedConcept():Concept{
    	if(this.designer.currentSelectedBox != null) {
    		return this.designer.currentSelectedBox.getConcept();
    	}
    	
		return null;
    }
    
    public function conceptSelectionChanged(event:Event):void {
    	if(this.selectedConcept() == null) {
    		this.addProblemButton.enabled = false;
    		this.tagProblemButton.enabled = false;
    		this.statusNotification.text = "No Concept Selected - Click Once to Select";
    	}
    	else {
    		this.addProblemButton.enabled = true;
    		this.tagProblemButton.enabled = true;
    		
    		var probNum:int = 0;
    		
    		var probs:ArrayCollection = this.designer.getCourseMap().getProblems();
			for(var i:int = 0; i < probs.length; i++) {
				var p:Problem = Problem(probs.getItemAt(i));
				if(p.getConcepts().contains(selectedConcept())) {
					probNum++;
				}
			}
			
			this.statusNotification.text = "Selected Concept: "+selectedConcept().getName()+"; tagged for "+probNum+" problems";
    		
    		
    	}
    }
    
    // this method supply drag box when mose move on the design area 
    private function dragPicture(event:MouseEvent, img1:Image,format:String):void{
      var dragInitiator:Image=Image(event.currentTarget);
      var ds:DragSource = new DragSource();
      ds.addData(img1,format);
      var imageProxy:Image = new Image();
      imageProxy.source = img1.source;	    
      imageProxy.height= 100;
      imageProxy.width= 100;
      DragManager.doDrag(dragInitiator, ds, event,imageProxy, 0, 0, 1.00);
	  cursorID = CursorManager.setCursor(customCursor);
    }      
    // this method works when click on the line button 
    // it is make enable to draw line
   	public function doDrawEnable():void{
   	  designer.setIsDrawEnable(true);
   	  line.setStyle("icon",lineOnPicture); 
   	}
  	
  	private function confirmHandler(event:CloseEvent):void {
  		if (event.detail == Alert.YES) {
			// what to do if user selected “yes”
			this.addProblemButton.enabled = false;
	  		this.tagProblemButton.enabled = false; 
	  		trace("disabled buttons");
	  		designer.reset();
		}   		
  	}
  	
  	private function reset():void{
  		var a:Alert = Alert.show("Resetting RapidLearn will clear ALL contents for this course. Are you sure you want to reset?", "Confirmation", Alert.YES|Alert.NO, this, confirmHandler, null, Alert.NO); 
  	} 	
  
    ]]>
  </mx:Script>
  <mx:Canvas id="MainArea" width="100%" height="100%" click="MainArea.setFocus()">
      <mx:Image id="box" source="@Embed(source='assets/add.png')" mouseMove="dragPicture(event, box, 'img');myoffset(box);" x="10" y="10"></mx:Image>
      <mx:Label text="Drag and drop this picture on " x="10" y="60"></mx:Label>
      <mx:Label text="Click the button above to" x="225" y="60"></mx:Label>
    <mx:Canvas id="notificationArea" top="100" bottom="130" backgroundColor="#c0c0c0" width="100%">
    	<mx:Label id="statusNotification" textAlign="center" fontSize="12" text="No Concept Selected" paddingLeft="10"/>
    </mx:Canvas>
    
    <mx:Canvas id="designArea" dragEnter="pictureDragEnter(event)" dragDrop="pictureDragDrop(event)" top="130" width="100%" height="100%" backgroundColor="#ffffff" click="designer.whitespaceClickHandler()" >      
    </mx:Canvas>    
    <mx:Button x="229" y="10"  id="line" icon="@Embed(source='assets/arrow_black.png')" click="doDrawEnable()" height="50" width="70" creationComplete="designer.setLineButton(line);"/>
    <mx:Label x="10" y="75" text="the gray area to draw a box" height="20"/>
    <mx:Label x="225" y="75" text="draw a line between two boxes."/>
    <mx:Button x="403" y="9" label="Reset" height="50" click="reset()"/>
    <mx:Button x="503" y="9" label="Add Problem" height="50" id="addProblemButton" click="showAddProblemForm();" enabled="false"/>
    <mx:Button x="633" y="9" label="Tag Existing Problem" height="50" id="tagProblemButton" click="showTagExistingProbsForm();" enabled="false"/>
  </mx:Canvas>
  
</mx:Application>
